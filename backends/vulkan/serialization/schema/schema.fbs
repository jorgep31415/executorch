// Copyright (c) Meta Platforms, Inc. and affiliates.

namespace at.vulkan.delegate;

// Update after any BC breaking changes.
file_identifier "VK00";

enum VkDataType : short {
  // IEEE754 single-precision floating-point.
  fp32 = 0,
}

enum VkArithmeticOpType : short {
  vk_arithmetic_op_type_add = 0,
  vk_arithmetic_op_type_sub = 1,
  vk_arithmetic_op_type_mul = 2,
  vk_arithmetic_op_type_div = 3,
  vk_arithmetic_op_type_floor_div = 4,
  vk_arithmetic_op_type_pow = 5,
}

table VkArithmeticNode {
  input1_id:uint;
  input2_id:uint;
  output_id:uint;
  op_type:VkArithmeticOpType;
  flags:uint;
}

table VkNode {
  node:VkArithmeticNode;
  debug_handle:uint;
}

table VkTensor {
  // Type of the tensor's elements.
  datatype:VkDataType;
  // Shape dimensions.
  dims:[uint];
  // Index to constant_buffer; index 0 is reserved for non-constant tensors.
  constant_buffer_id:uint;
  // Index to the shared memory object; negative means the tensor doesn't share memory.
  mem_obj_id:int;
}

table VkValue {
  value:VkTensor;
}

// Taken from ExecuTorch.
// Data buffer abstraction.
table Buffer {
  storage:[ubyte] (force_align: 16);
}

table VkGraph {
  // Schema version.
  version:string;

  // All nodes used in this program.
  nodes:[VkNode];

  // All values used in this program.
  values:[VkValue];

  // All constant data used in this program (e.g. weight tensors). Constant data use VkTensor
  // constant buffer indices. Index 0 is reserved for non-constant VkTensor.
  constant_buffers:[Buffer];

  // Index to values for external inputs.
  input_ids:[uint];

  // Index to values for external outputs.
  output_ids:[uint];
}

root_type VkGraph;
